syntax = "proto2";

// General Structs
message Peer {
  required bytes remotePublicKey = 1;
  required string remoteAddress = 2;
  required string type = 3;
}

// Corestore Methods

message OpenRequest {
  required uint32 id = 1;
  optional bytes key = 2;
  optional string name = 3;
  optional bool weak = 4;
}

message OpenResponse {
  required bytes key = 2;
  required uint64 length = 3;
  required uint64 byteLength = 4;
  required bool writable = 5;
}

// Corestore Events

message FeedEvent {
  required bytes key = 1;
}

// Networking Methods

message NetworkConfiguration {
  required bytes discoveryKey = 1;
  optional bool announce = 2;
  optional bool lookup = 3;
  optional bool remember = 4;
}

message ConfigureNetworkRequest {
  required NetworkConfiguration configuration = 1;
  optional bool flush = 2;
}

message GetNetworkConfigurationRequest {
  required bytes discoveryKey = 1;
}

message GetNetworkConfigurationResponse {
  optional NetworkConfiguration configuration = 1;
}

message GetAllNetworkConfigurationsResponse {
  repeated NetworkConfiguration configurations = 1;
}

// Hypercore Methods

message CloseRequest {
  required uint32 id = 1;
}

message GetRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
  optional bool wait = 3 [default = true];
  optional bool ifAvailable = 4;
}
message GetResponse {
  optional bytes block = 1;
}

message AppendRequest {
  required uint32 id = 1;
  repeated bytes blocks = 2;
}
message AppendResponse {
  required uint64 length = 1;
  required uint64 byteLength = 2;
  required uint64 seq = 3;
}

message UpdateRequest {
  required uint32 id = 1;
  optional uint64 minLength = 2;
  optional bool ifAvailable = 3;
  optional bool hash = 4 [default = true];
}

message SeekRequest {
  required uint32 id = 1;
  required uint64 byteOffset = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  optional bool wait = 5 [default = true];
  optional bool ifAvailable = 6;
}
message SeekResponse {
  required uint64 seq = 1;
  required uint64 blockOffset = 2;
}

message HasRequest {
  required uint32 id = 1;
  required uint64 seq = 2;
}
message HasResponse {
  required bool has = 1;
}

message DownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
  optional uint64 start = 3;
  optional uint64 end = 4;
  repeated uint64 blocks = 5;
  optional bool linear = 6;
}

message UndownloadRequest {
  required uint64 id = 1;
  required uint64 resourceId = 2;
}

// Hypercore Events

message AppendEvent {
  required uint64 id = 1;
  required uint64 length = 2;
  required uint64 byteLength = 3;
}

message PeerEvent {
  required uint64 id = 1;
  required Peer peer = 2;
}

message CloseEvent {
  required uint64 id = 1;
}

// TODO: Before official release, tag these methods with explicit IDs.

service Corestore {
   // Methods
  rpc Open (OpenRequest) returns (OpenResponse);

  // Events
  rpc OnFeed (FeedEvent) returns (Void);
}

service Hypercore {
   // Methods
  rpc Get (GetRequest) returns (GetResponse);
  rpc Append (AppendRequest) returns (AppendResponse);
  rpc Update (UpdateRequest) returns (Void);
  rpc Seek (SeekRequest) returns (SeekResponse);
  rpc Has (HasRequest) returns (HasResponse);
  rpc Download (DownloadRequest) returns (Void);
  rpc Undownload (UndownloadRequest) returns (Void);
  rpc Close (CloseRequest) returns (Void);

  // Events
  rpc OnAppend (AppendEvent) returns (Void);
  rpc OnClose (CloseEvent) returns (Void);
  rpc OnPeerOpen (PeerEvent) returns (Void);
  rpc OnPeerRemove (PeerEvent) returns (Void);
}

service Network {
   // Methods
  rpc ConfigureNetwork (ConfigureNetworkRequest) returns (Void);
  rpc GetNetworkConfiguration (GetNetworkConfigurationRequest) returns (GetNetworkConfigurationResponse);
  rpc GetAllNetworkConfigurations (Void) returns (GetAllNetworkConfigurationsResponse);

  // Events
}