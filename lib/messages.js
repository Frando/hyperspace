// This file is auto generated by the protocol-buffers compiler

/* eslint-disable quotes */
/* eslint-disable indent */
/* eslint-disable no-redeclare */
/* eslint-disable camelcase */

// Remember to `npm install --save protocol-buffers-encodings`
var encodings = require('protocol-buffers-encodings')
var varint = encodings.varint
var skip = encodings.skip

var Error = exports.Error = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var HypercoreOptions = exports.HypercoreOptions = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var OpenRequest = exports.OpenRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var OpenResponse = exports.OpenResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var CloseRequest = exports.CloseRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var GetRequest = exports.GetRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var GetResponse = exports.GetResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var AppendRequest = exports.AppendRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var AppendResponse = exports.AppendResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var UpdateRequest = exports.UpdateRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SeekRequest = exports.SeekRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var SeekResponse = exports.SeekResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var HasRequest = exports.HasRequest = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var HasResponse = exports.HasResponse = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

var AppendEvent = exports.AppendEvent = {
  buffer: true,
  encodingLength: null,
  encode: null,
  decode: null
}

defineError()
defineHypercoreOptions()
defineOpenRequest()
defineOpenResponse()
defineCloseRequest()
defineGetRequest()
defineGetResponse()
defineAppendRequest()
defineAppendResponse()
defineUpdateRequest()
defineSeekRequest()
defineSeekResponse()
defineHasRequest()
defineHasResponse()
defineAppendEvent()

function defineError () {
  Error.encodingLength = encodingLength
  Error.encode = encode
  Error.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.code)) throw new Error("code is required")
    var len = encodings.int32.encodingLength(obj.code)
    length += 1 + len
    if (!defined(obj.message)) throw new Error("message is required")
    var len = encodings.string.encodingLength(obj.message)
    length += 1 + len
    if (defined(obj.details)) {
      var len = encodings.string.encodingLength(obj.details)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.code)) throw new Error("code is required")
    buf[offset++] = 8
    encodings.int32.encode(obj.code, buf, offset)
    offset += encodings.int32.encode.bytes
    if (!defined(obj.message)) throw new Error("message is required")
    buf[offset++] = 18
    encodings.string.encode(obj.message, buf, offset)
    offset += encodings.string.encode.bytes
    if (defined(obj.details)) {
      buf[offset++] = 26
      encodings.string.encode(obj.details, buf, offset)
      offset += encodings.string.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      code: 0,
      message: "",
      details: ""
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.code = encodings.int32.decode(buf, offset)
        offset += encodings.int32.decode.bytes
        found0 = true
        break
        case 2:
        obj.message = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        found1 = true
        break
        case 3:
        obj.details = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHypercoreOptions () {
  HypercoreOptions.encodingLength = encodingLength
  HypercoreOptions.encode = encode
  HypercoreOptions.decode = decode

  function encodingLength (obj) {
    var length = 0
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOpenRequest () {
  OpenRequest.encodingLength = encodingLength
  OpenRequest.encode = encode
  OpenRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.key)) {
      var len = encodings.bytes.encodingLength(obj.key)
      length += 1 + len
    }
    if (defined(obj.name)) {
      var len = encodings.string.encodingLength(obj.name)
      length += 1 + len
    }
    if (defined(obj.opts)) {
      var len = HypercoreOptions.encodingLength(obj.opts)
      length += varint.encodingLength(len)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.key)) {
      buf[offset++] = 18
      encodings.bytes.encode(obj.key, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    if (defined(obj.name)) {
      buf[offset++] = 26
      encodings.string.encode(obj.name, buf, offset)
      offset += encodings.string.encode.bytes
    }
    if (defined(obj.opts)) {
      buf[offset++] = 34
      varint.encode(HypercoreOptions.encodingLength(obj.opts), buf, offset)
      offset += varint.encode.bytes
      HypercoreOptions.encode(obj.opts, buf, offset)
      offset += HypercoreOptions.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      key: null,
      name: "",
      opts: null
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        case 3:
        obj.name = encodings.string.decode(buf, offset)
        offset += encodings.string.decode.bytes
        break
        case 4:
        var len = varint.decode(buf, offset)
        offset += varint.decode.bytes
        obj.opts = HypercoreOptions.decode(buf, offset, offset + len)
        offset += HypercoreOptions.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineOpenResponse () {
  OpenResponse.encodingLength = encodingLength
  OpenResponse.encode = encode
  OpenResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.key)) throw new Error("key is required")
    var len = encodings.bytes.encodingLength(obj.key)
    length += 1 + len
    if (!defined(obj.length)) throw new Error("length is required")
    var len = encodings.varint.encodingLength(obj.length)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = encodings.varint.encodingLength(obj.byteLength)
    length += 1 + len
    if (!defined(obj.writable)) throw new Error("writable is required")
    var len = encodings.bool.encodingLength(obj.writable)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.key)) throw new Error("key is required")
    buf[offset++] = 18
    encodings.bytes.encode(obj.key, buf, offset)
    offset += encodings.bytes.encode.bytes
    if (!defined(obj.length)) throw new Error("length is required")
    buf[offset++] = 24
    encodings.varint.encode(obj.length, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 32
    encodings.varint.encode(obj.byteLength, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.writable)) throw new Error("writable is required")
    buf[offset++] = 40
    encodings.bool.encode(obj.writable, buf, offset)
    offset += encodings.bool.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      key: null,
      length: 0,
      byteLength: 0,
      writable: false
    }
    var found0 = false
    var found1 = false
    var found2 = false
    var found3 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2 || !found3) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 2:
        obj.key = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        found0 = true
        break
        case 3:
        obj.length = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 4:
        obj.byteLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found2 = true
        break
        case 5:
        obj.writable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found3 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineCloseRequest () {
  CloseRequest.encodingLength = encodingLength
  CloseRequest.encode = encode
  CloseRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineGetRequest () {
  GetRequest.encodingLength = encodingLength
  GetRequest.encode = encode
  GetRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    if (defined(obj.wait)) {
      var len = encodings.bool.encodingLength(obj.wait)
      length += 1 + len
    }
    if (defined(obj.ifAvailable)) {
      var len = encodings.bool.encodingLength(obj.ifAvailable)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.wait)) {
      buf[offset++] = 24
      encodings.bool.encode(obj.wait, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.ifAvailable)) {
      buf[offset++] = 32
      encodings.bool.encode(obj.ifAvailable, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      seq: 0,
      wait: false,
      ifAvailable: false
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.wait = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 4:
        obj.ifAvailable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineGetResponse () {
  GetResponse.encodingLength = encodingLength
  GetResponse.encode = encode
  GetResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (defined(obj.block)) {
      var len = encodings.bytes.encodingLength(obj.block)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (defined(obj.block)) {
      buf[offset++] = 10
      encodings.bytes.encode(obj.block, buf, offset)
      offset += encodings.bytes.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      block: null
    }
    while (true) {
      if (end <= offset) {
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.block = encodings.bytes.decode(buf, offset)
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAppendRequest () {
  AppendRequest.encodingLength = encodingLength
  AppendRequest.encode = encode
  AppendRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.blocks)) {
      for (var i = 0; i < obj.blocks.length; i++) {
        if (!defined(obj.blocks[i])) continue
        var len = encodings.bytes.encodingLength(obj.blocks[i])
        length += 1 + len
      }
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.blocks)) {
      for (var i = 0; i < obj.blocks.length; i++) {
        if (!defined(obj.blocks[i])) continue
        buf[offset++] = 18
        encodings.bytes.encode(obj.blocks[i], buf, offset)
        offset += encodings.bytes.encode.bytes
      }
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      blocks: []
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.blocks.push(encodings.bytes.decode(buf, offset))
        offset += encodings.bytes.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAppendResponse () {
  AppendResponse.encodingLength = encodingLength
  AppendResponse.encode = encode
  AppendResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.length)) throw new Error("length is required")
    var len = encodings.varint.encodingLength(obj.length)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = encodings.varint.encodingLength(obj.byteLength)
    length += 1 + len
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.length)) throw new Error("length is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.length, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.byteLength, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 24
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      length: 0,
      byteLength: 0,
      seq: 0
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.length = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.byteLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineUpdateRequest () {
  UpdateRequest.encodingLength = encodingLength
  UpdateRequest.encode = encode
  UpdateRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (defined(obj.minLength)) {
      var len = encodings.varint.encodingLength(obj.minLength)
      length += 1 + len
    }
    if (defined(obj.ifAvailable)) {
      var len = encodings.bool.encodingLength(obj.ifAvailable)
      length += 1 + len
    }
    if (defined(obj.hash)) {
      var len = encodings.bool.encodingLength(obj.hash)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.minLength)) {
      buf[offset++] = 16
      encodings.varint.encode(obj.minLength, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.ifAvailable)) {
      buf[offset++] = 24
      encodings.bool.encode(obj.ifAvailable, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.hash)) {
      buf[offset++] = 32
      encodings.bool.encode(obj.hash, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      minLength: 0,
      ifAvailable: false,
      hash: true
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.minLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 3:
        obj.ifAvailable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 4:
        obj.hash = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSeekRequest () {
  SeekRequest.encodingLength = encodingLength
  SeekRequest.encode = encode
  SeekRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.byteOffset)) throw new Error("byteOffset is required")
    var len = encodings.varint.encodingLength(obj.byteOffset)
    length += 1 + len
    if (defined(obj.start)) {
      var len = encodings.varint.encodingLength(obj.start)
      length += 1 + len
    }
    if (defined(obj.end)) {
      var len = encodings.varint.encodingLength(obj.end)
      length += 1 + len
    }
    if (defined(obj.wait)) {
      var len = encodings.bool.encodingLength(obj.wait)
      length += 1 + len
    }
    if (defined(obj.ifAvailable)) {
      var len = encodings.bool.encodingLength(obj.ifAvailable)
      length += 1 + len
    }
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.byteOffset)) throw new Error("byteOffset is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.byteOffset, buf, offset)
    offset += encodings.varint.encode.bytes
    if (defined(obj.start)) {
      buf[offset++] = 24
      encodings.varint.encode(obj.start, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.end)) {
      buf[offset++] = 32
      encodings.varint.encode(obj.end, buf, offset)
      offset += encodings.varint.encode.bytes
    }
    if (defined(obj.wait)) {
      buf[offset++] = 40
      encodings.bool.encode(obj.wait, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    if (defined(obj.ifAvailable)) {
      buf[offset++] = 48
      encodings.bool.encode(obj.ifAvailable, buf, offset)
      offset += encodings.bool.encode.bytes
    }
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      byteOffset: 0,
      start: 0,
      end: 0,
      wait: false,
      ifAvailable: false
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.byteOffset = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.start = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 4:
        obj.end = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        break
        case 5:
        obj.wait = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        case 6:
        obj.ifAvailable = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineSeekResponse () {
  SeekResponse.encodingLength = encodingLength
  SeekResponse.encode = encode
  SeekResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    if (!defined(obj.blockOffset)) throw new Error("blockOffset is required")
    var len = encodings.varint.encodingLength(obj.blockOffset)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.blockOffset)) throw new Error("blockOffset is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.blockOffset, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      seq: 0,
      blockOffset: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.blockOffset = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHasRequest () {
  HasRequest.encodingLength = encodingLength
  HasRequest.encode = encode
  HasRequest.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.seq)) throw new Error("seq is required")
    var len = encodings.varint.encodingLength(obj.seq)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.seq)) throw new Error("seq is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.seq, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      seq: 0
    }
    var found0 = false
    var found1 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.seq = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineHasResponse () {
  HasResponse.encodingLength = encodingLength
  HasResponse.encode = encode
  HasResponse.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.has)) throw new Error("has is required")
    var len = encodings.bool.encodingLength(obj.has)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.has)) throw new Error("has is required")
    buf[offset++] = 8
    encodings.bool.encode(obj.has, buf, offset)
    offset += encodings.bool.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      has: false
    }
    var found0 = false
    while (true) {
      if (end <= offset) {
        if (!found0) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.has = encodings.bool.decode(buf, offset)
        offset += encodings.bool.decode.bytes
        found0 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defineAppendEvent () {
  AppendEvent.encodingLength = encodingLength
  AppendEvent.encode = encode
  AppendEvent.decode = decode

  function encodingLength (obj) {
    var length = 0
    if (!defined(obj.id)) throw new Error("id is required")
    var len = encodings.varint.encodingLength(obj.id)
    length += 1 + len
    if (!defined(obj.length)) throw new Error("length is required")
    var len = encodings.varint.encodingLength(obj.length)
    length += 1 + len
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    var len = encodings.varint.encodingLength(obj.byteLength)
    length += 1 + len
    return length
  }

  function encode (obj, buf, offset) {
    if (!offset) offset = 0
    if (!buf) buf = Buffer.allocUnsafe(encodingLength(obj))
    var oldOffset = offset
    if (!defined(obj.id)) throw new Error("id is required")
    buf[offset++] = 8
    encodings.varint.encode(obj.id, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.length)) throw new Error("length is required")
    buf[offset++] = 16
    encodings.varint.encode(obj.length, buf, offset)
    offset += encodings.varint.encode.bytes
    if (!defined(obj.byteLength)) throw new Error("byteLength is required")
    buf[offset++] = 24
    encodings.varint.encode(obj.byteLength, buf, offset)
    offset += encodings.varint.encode.bytes
    encode.bytes = offset - oldOffset
    return buf
  }

  function decode (buf, offset, end) {
    if (!offset) offset = 0
    if (!end) end = buf.length
    if (!(end <= buf.length && offset <= buf.length)) throw new Error("Decoded message is not valid")
    var oldOffset = offset
    var obj = {
      id: 0,
      length: 0,
      byteLength: 0
    }
    var found0 = false
    var found1 = false
    var found2 = false
    while (true) {
      if (end <= offset) {
        if (!found0 || !found1 || !found2) throw new Error("Decoded message is not valid")
        decode.bytes = offset - oldOffset
        return obj
      }
      var prefix = varint.decode(buf, offset)
      offset += varint.decode.bytes
      var tag = prefix >> 3
      switch (tag) {
        case 1:
        obj.id = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found0 = true
        break
        case 2:
        obj.length = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found1 = true
        break
        case 3:
        obj.byteLength = encodings.varint.decode(buf, offset)
        offset += encodings.varint.decode.bytes
        found2 = true
        break
        default:
        offset = skip(prefix & 7, buf, offset)
      }
    }
  }
}

function defined (val) {
  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))
}
